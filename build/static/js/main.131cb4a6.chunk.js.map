{"version":3,"sources":["Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["validateFields","email","password","match","isNaN","event","a","preventDefault","target","value","body","fetch","method","JSON","stringify","headers","res","status","errorMessage","document","querySelector","json","data","textContent","message","hidden","token","localStorage","setItem","Login","useState","userEmail","setUserEmail","userPassword","setUserPassword","className","onSubmit","e","handleSubmit","required","name","type","placeholder","onChange","minLength","maxLength","Number","id","disabled","App","Boolean","window","location","hostname","ReactDOM","hydrate","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wOAEA,SAASA,EAAeC,EAAOC,GAE7B,GAAID,EAAME,MADS,2HACgC,kBAAbD,IAA0BE,MAAMF,GAAW,OAAO,E,4CAG1F,WAA4BG,GAA5B,2BAAAC,EAAA,6DACED,EAAME,iBACAN,EAAQI,EAAMG,OAAOP,MAAMQ,MAC3BP,EAAWG,EAAMG,OAAON,SAASO,MACjCC,EAAO,CAAET,QAAOC,YAJxB,SAKoBS,MAAM,8BAA+B,CAAEC,OAAQ,OAAQF,KAAMG,KAAKC,UAAUJ,GAAOK,QAAS,CAAE,eAAgB,sBALlI,UAMqB,OADbC,EALR,QAMUC,OANV,wBAOUC,EAAeC,SAASC,cAAc,cAPhD,UAQuBJ,EAAIK,OAR3B,eAQUC,EARV,OASIJ,EAAaK,YAAb,UAA8BL,EAAaK,YAA3C,YAA0DD,EAAKE,SAC/DN,EAAaO,QAAS,EAV1B,4CAasBT,EAAIK,OAb1B,QAaQK,EAbR,OAcEC,aAAaC,QAAQ,QAASF,GAdhC,6C,sBA+CeG,MA9Bf,WAAkB,IAAD,EACmBC,mBAAS,IAD5B,mBACRC,EADQ,KACGC,EADH,OAEyBF,mBAAS,IAFlC,mBAERG,EAFQ,KAEMC,EAFN,KAGf,OACE,yBAAKC,UAAU,SACb,qCACA,0BAAMA,UAAU,aAAaC,SAAU,SAACC,GAAD,O,2CAAOC,CAAaD,KACzD,2BACEE,UAAQ,EACRC,KAAK,QACLC,KAAK,QACLC,YAAY,mBACZC,SAAU,SAACN,GAAD,OAAOL,EAAaK,EAAE7B,OAAOC,UAEzC,2BACE8B,UAAQ,EACRK,UAAU,IACVC,UAAU,IACVL,KAAK,WACLC,KAAK,WACLC,YAAY,mBACZC,SAAU,SAACN,GAAD,OAAOH,EAAgBY,OAAOT,EAAE7B,OAAOC,WAEnD,uBAAGsC,GAAG,YAAYtB,QAAM,GAAxB,UACA,2BAAOU,UAAU,cAAcM,KAAK,SAAShC,MAAM,SAASuC,UAAWhD,EAAe+B,EAAWE,Q,MCnC1FgB,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlD,MACvB,2DCZNmD,IAASC,QAAQ,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,a","file":"static/js/main.131cb4a6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction validateFields(email, password) {\r\n  const emailRegex = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n  if (email.match(emailRegex) && typeof password === 'number' && !isNaN(password)) return true\r\n}\r\n\r\nasync function handleSubmit(event) {\r\n  event.preventDefault();\r\n  const email = event.target.email.value;\r\n  const password = event.target.password.value;\r\n  const body = { email, password };\r\n  const res = await fetch(\"http://localhost:3001/login\", { method: 'post', body: JSON.stringify(body), headers: { 'Content-Type': 'application/json' } });\r\n  if (res.status !== 200) {\r\n    const errorMessage = document.querySelector('#error-msg');\r\n    const data = await res.json();\r\n    errorMessage.textContent = `${errorMessage.textContent} ${data.message}`;\r\n    errorMessage.hidden = false;\r\n    return;\r\n  }\r\n  const token = await res.json();\r\n  localStorage.setItem('token', token);\r\n}\r\n\r\nfunction Login() {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userPassword, setUserPassword] = useState('');\r\n  return (\r\n    <div className=\"login\">\r\n      <h1>Login</h1>\r\n      <form className=\"login-form\" onSubmit={(e) => handleSubmit(e)}>\r\n        <input\r\n          required\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Digite seu Email\"\r\n          onChange={(e) => setUserEmail(e.target.value)}\r\n        />\r\n        <input\r\n          required\r\n          minLength=\"6\"\r\n          maxLength=\"6\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Digite sua Senha\"\r\n          onChange={(e) => setUserPassword(Number(e.target.value))}\r\n        />\r\n        <p id=\"error-msg\" hidden>Erro: </p>\r\n        <input className=\"form-submit\" type=\"submit\" value=\"Entrar\" disabled={!validateFields(userEmail, userPassword)} />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport Login from './Components/Login';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Login />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.hydrate(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}